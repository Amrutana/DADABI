{
	"name": "DF_SALES_FCT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SNF_sales",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SNF_DIM_CUSTOMER1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "join"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PID as string (\"INFERRED\"),",
				"     CUSTNAME as string (\"UNKNOWN\")",
				"}",
				"source(output(",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CUSTOMER_SK as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          DI_CREATEDDT as timestamp,",
				"          PID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"join split(isNull([join].CUSTOMER_ID)\r",
				",",
				"     disjoint: true) ~> split1@(NONMATCHING, MATCHING)",
				"source1, source2 join(CUSTOMERID == CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"split1@NONMATCHING derive(CUSTOMER_SK = uuid(),",
				"          CUSTOMER_ID = CUSTOMERID,",
				"          CUSTOMER_NAME = $CUSTNAME,",
				"          DI_CREATEDDT = currentTimestamp(),",
				"          PID = $PID) ~> derivedColumn1",
				"split1@MATCHING derive(INVOICE_SK = uuid(),",
				"          INVOICEID = INVOICEID,",
				"          CUSTOMER_ID = CUSTOMERID,",
				"          INVOICEID = ERROR_FUNCTION(''),",
				"          column3 = ERROR_FUNCTION(''),",
				"          column4 = ERROR_FUNCTION('')) ~> derivedColumn2"
			]
		}
	}
}