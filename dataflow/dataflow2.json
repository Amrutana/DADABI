{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_SEATTLE",
						"type": "DatasetReference"
					},
					"name": "Sourcestg"
				},
				{
					"dataset": {
						"referenceName": "LocDim",
						"type": "DatasetReference"
					},
					"name": "sourceLocDim"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableBREEDDIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "Datedim",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DL_JOB_ID as string,",
				"          DL_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> Sourcestg",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocDim",
				"source(output(",
				"          BREED_SK as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          IS_CURRENT as string,",
				"          BREED_DK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          DATE_SK as string,",
				"          DAY_ABBR as string,",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as string,",
				"          QTR_NUM as string,",
				"          DT as string,",
				"          DAY_NUM as string,",
				"          DAY_NAME as string,",
				"          YEAR_NUM as string,",
				"          IS_WEEKEND as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"Sourcestg, sourceLocDim join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, sourceBreedDim join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, sourceDateDim join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 keyGenerate(output({undefined} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1"
			]
		}
	}
}